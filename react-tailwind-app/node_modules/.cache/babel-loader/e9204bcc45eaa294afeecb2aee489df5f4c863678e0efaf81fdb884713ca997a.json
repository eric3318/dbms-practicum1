{"ast":null,"code":"const BASE_URL = \"http://localhost/dbms-practicum1/api/players.php\";\n\n// GET all players (join query for top players with achievements)\nexport const getPlayers = async () => {\n  const response = await fetch(BASE_URL);\n  if (!response.ok) throw new Error(\"Failed to fetch players\");\n  return await response.json();\n};\n\n// GET single player by ID\nexport const getPlayer = async id => {\n  const response = await fetch(`${BASE_URL}/${id}`);\n  if (!response.ok) throw new Error(\"Failed to fetch player\");\n  return await response.json();\n};\n\n// PUT update player by ID\nexport const updatePlayer = async (id, payload) => {\n  const response = await fetch(`${BASE_URL}/${id}`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n  if (!response.ok) throw new Error(\"Failed to update player\");\n  return await response.json();\n};\n\n// DELETE player by ID\nexport const deletePlayer = async id => {\n  const response = await fetch(`${BASE_URL}/${id}`, {\n    method: \"DELETE\"\n  });\n  if (!response.ok) throw new Error(\"Failed to delete player\");\n  return await response.json();\n};","map":{"version":3,"names":["BASE_URL","getPlayers","response","fetch","ok","Error","json","getPlayer","id","updatePlayer","payload","method","headers","body","JSON","stringify","deletePlayer"],"sources":["/Users/ziyixu/LocalDocuments/CS5200/Practicum1/react-tailwind-app/src/services/playerService.js"],"sourcesContent":["const BASE_URL = \"http://localhost/dbms-practicum1/api/players.php\";\n\n// GET all players (join query for top players with achievements)\nexport const getPlayers = async () => {\n  const response = await fetch(BASE_URL);\n  if (!response.ok) throw new Error(\"Failed to fetch players\");\n  return await response.json();\n};\n\n// GET single player by ID\nexport const getPlayer = async (id) => {\n  const response = await fetch(`${BASE_URL}/${id}`);\n  if (!response.ok) throw new Error(\"Failed to fetch player\");\n  return await response.json();\n};\n\n// PUT update player by ID\nexport const updatePlayer = async (id, payload) => {\n  const response = await fetch(`${BASE_URL}/${id}`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(payload),\n  });\n\n  if (!response.ok) throw new Error(\"Failed to update player\");\n  return await response.json();\n};\n\n// DELETE player by ID\nexport const deletePlayer = async (id) => {\n  const response = await fetch(`${BASE_URL}/${id}`, {\n    method: \"DELETE\",\n  });\n\n  if (!response.ok) throw new Error(\"Failed to delete player\");\n  return await response.json();\n};\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,kDAAkD;;AAEnE;AACA,OAAO,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;EACpC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,QAAQ,CAAC;EACtC,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;EAC5D,OAAO,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;AAC9B,CAAC;;AAED;AACA,OAAO,MAAMC,SAAS,GAAG,MAAOC,EAAE,IAAK;EACrC,MAAMN,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,QAAQ,IAAIQ,EAAE,EAAE,CAAC;EACjD,IAAI,CAACN,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;EAC3D,OAAO,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;AAC9B,CAAC;;AAED;AACA,OAAO,MAAMG,YAAY,GAAG,MAAAA,CAAOD,EAAE,EAAEE,OAAO,KAAK;EACjD,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,QAAQ,IAAIQ,EAAE,EAAE,EAAE;IAChDG,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,OAAO;EAC9B,CAAC,CAAC;EAEF,IAAI,CAACR,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;EAC5D,OAAO,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;AAC9B,CAAC;;AAED;AACA,OAAO,MAAMU,YAAY,GAAG,MAAOR,EAAE,IAAK;EACxC,MAAMN,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,QAAQ,IAAIQ,EAAE,EAAE,EAAE;IAChDG,MAAM,EAAE;EACV,CAAC,CAAC;EAEF,IAAI,CAACT,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;EAC5D,OAAO,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;AAC9B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}